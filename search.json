[
  {
    "objectID": "posts/Happiness and COVID-19 Project.html",
    "href": "posts/Happiness and COVID-19 Project.html",
    "title": "Happiness and COVID-19",
    "section": "",
    "text": "Amy Zhou\nDH 140\nProfessor Winjum\nMarch 24, 2023"
  },
  {
    "objectID": "posts/Happiness and COVID-19 Project.html#findings",
    "href": "posts/Happiness and COVID-19 Project.html#findings",
    "title": "Happiness and COVID-19",
    "section": "Findings",
    "text": "Findings\nTo conclude, the findings from the data analysis are as follows:\nHow has happiness by country shifted between 2019-2021, the time frame of the COVID-19 pandemic? Which countries had the greatest positive and negative shifts in happiness?\nThe max happiness score between 2019-21 appears to increase very slightly each year. The mean and minimum happiness score betwen 2019-21 appears to decrease each year. However, the number of countries that increased or decreased in happiness nor the extent of each country’s shift in happiness can be determined by examining the mean, max, and minimum happiness scores.\nBetween 2019-20, Afghanistan had the greatest positive shift in happiness while Liberia had the most negative shift in happiness. Between 2020-21, Pakistan had the greatest positive shift in happiness while Armenia had the most negative shift in happiness.\nHow did happiness factors shift and affect happiness scores between 2019-2021?\nThe factors GDP per capita, Social support, healthy life expectancy, and freedom to make life decisions appear to have a direct relationship with the happiness score such that an high value in any of the four factors usually indicates a higher-level happiness score. Generosity and perception of corruption do not appear to have a clear relationship with happiness scores such that high values in either factors did not necessarily correlate with high happiness scores. Thus, the shifts in generosity and perception of corruption were not examined for their impacts on the happiness scores between 2019-21.\n\n\n\n\n\n\n\n\n\nContributing Factor\n2019-20 Trend + Impact\n2019-20 Trend + Impact\nPotential Causes\n\n\n\n\nGDP per Capita\nDecreased Contribution; Decreased Happiness Score\nIncreased Contribution; Increased Happiness Score\nClosing and Reopening local economies due to shelter in place mandates\n\n\nSocial Support\nDecreased Contribution; Decreased Happiness Score\nDecreased Contribution; Decreased Happiness Score\nSocial distancing and shelter in place mandates\n\n\nHealthy Life Expectancy\nDecreased Contribution; Decreased Happiness Score\nDecreased Contribution; Decreased Happiness Score\nCOVID-19 Deaths at all ages\n\n\nFreedom in Life Choices\nIncreased Contribution; Increased Happiness Score\nIncreased Contribution; Increased Happiness Score\nWorkplace flexibility\n\n\n\nIs there a correlation between happiness score and COVID-19 severity?\nThe scattergraph of Covid Cases per Capita vs Happiness Score does not have a linear fit, as evidenced by a low R-squared value. There may be other correlations, but the scattergraph does not appear to follow any polynomial fits at this time."
  },
  {
    "objectID": "posts/Happiness and COVID-19 Project.html#importance",
    "href": "posts/Happiness and COVID-19 Project.html#importance",
    "title": "Happiness and COVID-19",
    "section": "Importance",
    "text": "Importance\nThe findings are valuable in a variety of ways. Happiness should be one of the top priorties of every government; understanding how pandemics impact happiness factors is critical for creating action plans for the next pandemic that may hit. For example, the major decrease in social support during the pandemic must be addressed: how might countries upkeep a social network for citizens when they must stay socially distanced?\nThe findings reveal that case per capita severity is not a sole indicator of country happiness. It is possible for countries with low case counts to be on the lower end of the happiness spectrum, and it is possible for countries with high case counts to be on the higher end of the happiness spectrum. The lack of correlation suggests that country happiness during a pandemic may depend on other factors, such as country response and support systems in place.\nUnderstanding the factors of happiness and their changes during the pandemic is also valuable for mental health professionals. During the pandemic, numerous studies reported a plunge in mental health and an overwhelmed mental health indsutry. By being aware of what may be the root of many clients’ problems, mental health specialists are better able to address the issues and suggest preventative or resolutionary measures."
  },
  {
    "objectID": "posts/Happiness and COVID-19 Project.html#future-analysis-and-considerations",
    "href": "posts/Happiness and COVID-19 Project.html#future-analysis-and-considerations",
    "title": "Happiness and COVID-19",
    "section": "Future Analysis and Considerations",
    "text": "Future Analysis and Considerations\nIt is important to note that the results of this study are limited. A potential source of error includes inconsistent country participation in world happiness surveys. Due to the pandemic, survey response collection was hindered in some countries. This may lead to a skew toward results from countries that are faring better than average. Future studies may opt to eliminate data from countries not present in all three survey years between 2019-21 to reduce error. Additionally, data for COVID cases could be sourced from a larger time range; the data readily available and used in this analysis only covers the range of 12/2019-12/2020.\nWhile conducting this data analysis, it became evident that there are many factors that can tie into the results. A wholistic and multi-faceted study is necessary to fully assess the dynamic of happiness scores during a pandemic. Government response to pandemics, medical ability and accessibillity per country, and cultural differences in evaluating happiness are just a few additional factors that could be considered."
  },
  {
    "objectID": "posts/FinalProjectCode.html",
    "href": "posts/FinalProjectCode.html",
    "title": "amysblog",
    "section": "",
    "text": "Introduction\n\nDatasets:\n\nNutrition Facts for Starbucks Menu via Kaggle, Uploaded to GitHub\nNutrition Facts for McDonald’s Menu via Kaggle, Uploaded to GitHub\n\n\n\nDataset Descriptions:\nNutrition Facts for Starbucks Menu includes the nutrution facts for items at Starbucks. Nutrition Facts for McDonald’s Menu includes the nutrution facts for items at McDonalds.\n\n\nMotivation:\nTo gain insight on the product naming process at Starbucks (and McDonalds, if time permits). To identify if deceitful marketing tactics are being used to convince consumers that items are healthier than they are.\n\n\nResearch Questions:\n\nWhat general connotation do the menu items have at Starbucks (and McDonalds), and how does the connotation compare to the item’s nutritional value?\n\n\nWhat is the frequency of high frequency sounds and low frequency sounds in product names? How does it compare to its nutritional value for the most unhealthy products?\n\nAfter doing receiving inconclusive results in my intial analysis, I am considering switching my research questions to instead analyze how Starbucks and McDonalds differ in nutritional value. I am still exploring the datasets to see what other relationships I can examine.\n\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n\n\n\nData Exploration\n\nStarbucks Data\n\nsb_drinks = pd.read_csv('https://raw.githubusercontent.com/amywzhou/DH140/main/starbucks%20data/starbucks_drinkMenu_expanded.csv')\nsb_food = pd.read_csv('https://raw.githubusercontent.com/amywzhou/DH140/main/starbucks%20data/starbucks-menu-nutrition-food.csv')\n\n\nFood Data\n\nsb_food.info()\n\n<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 113 entries, 0 to 112\nData columns (total 6 columns):\n #   Column        Non-Null Count  Dtype  \n---  ------        --------------  -----  \n 0   Unnamed: 0    113 non-null    object \n 1    Calories     113 non-null    int64  \n 2    Fat (g)      113 non-null    float64\n 3    Carb. (g)    113 non-null    int64  \n 4    Fiber (g)    113 non-null    int64  \n 5    Protein (g)  113 non-null    int64  \ndtypes: float64(1), int64(4), object(1)\nmemory usage: 5.4+ KB\n\n\n\nsb_food.columns\n\nIndex(['Unnamed: 0', ' Calories', ' Fat (g)', ' Carb. (g)', ' Fiber (g)',\n       ' Protein (g)'],\n      dtype='object')\n\n\n\nsb_food = sb_food.rename(columns={'Unnamed: 0': 'Item'})\nsb_food.columns\n\nIndex(['Item', ' Calories', ' Fat (g)', ' Carb. (g)', ' Fiber (g)',\n       ' Protein (g)'],\n      dtype='object')\n\n\n\nsb_food.describe(include = 'all')\n\n\n\n\n\n  \n    \n      \n      Item\n      Calories\n      Fat (g)\n      Carb. (g)\n      Fiber (g)\n      Protein (g)\n    \n  \n  \n    \n      count\n      113\n      113.000000\n      113.000000\n      113.000000\n      113.000000\n      113.000000\n    \n    \n      unique\n      113\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n    \n    \n      top\n      Chonga Bagel\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n    \n    \n      freq\n      1\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n    \n    \n      mean\n      NaN\n      356.637168\n      16.353982\n      41.486726\n      2.849558\n      11.469027\n    \n    \n      std\n      NaN\n      127.710685\n      8.297397\n      15.796764\n      2.888466\n      8.463230\n    \n    \n      min\n      NaN\n      90.000000\n      0.000000\n      5.000000\n      0.000000\n      1.000000\n    \n    \n      25%\n      NaN\n      280.000000\n      9.000000\n      31.000000\n      1.000000\n      5.000000\n    \n    \n      50%\n      NaN\n      360.000000\n      17.000000\n      42.000000\n      2.000000\n      8.000000\n    \n    \n      75%\n      NaN\n      450.000000\n      23.000000\n      53.000000\n      3.000000\n      19.000000\n    \n    \n      max\n      NaN\n      650.000000\n      37.000000\n      80.000000\n      21.000000\n      34.000000\n    \n  \n\n\n\n\n\nsb_food.head()\n\n\n\n\n\n  \n    \n      \n      Item\n      Calories\n      Fat (g)\n      Carb. (g)\n      Fiber (g)\n      Protein (g)\n    \n  \n  \n    \n      0\n      Chonga Bagel\n      300\n      5.0\n      50\n      3\n      12\n    \n    \n      1\n      8-Grain Roll\n      380\n      6.0\n      70\n      7\n      10\n    \n    \n      2\n      Almond Croissant\n      410\n      22.0\n      45\n      3\n      10\n    \n    \n      3\n      Apple Fritter\n      460\n      23.0\n      56\n      2\n      7\n    \n    \n      4\n      Banana Nut Bread\n      420\n      22.0\n      52\n      2\n      6\n    \n  \n\n\n\n\n\nsb_food.tail()\n\n\n\n\n\n  \n    \n      \n      Item\n      Calories\n      Fat (g)\n      Carb. (g)\n      Fiber (g)\n      Protein (g)\n    \n  \n  \n    \n      108\n      Justin's Chocolate Hazelnut Butter\n      180\n      14.0\n      12\n      3\n      4\n    \n    \n      109\n      Justin's Classic Almond Butter\n      190\n      18.0\n      6\n      3\n      7\n    \n    \n      110\n      Lemon Chiffon Yogurt\n      340\n      13.0\n      38\n      0\n      18\n    \n    \n      111\n      Organic Avocado (Spread)\n      90\n      8.0\n      5\n      4\n      1\n    \n    \n      112\n      Seasonal Fruit Blend\n      90\n      0.0\n      24\n      4\n      1\n    \n  \n\n\n\n\n\nsb_food.plot(y = ' Calories', kind = 'box')\n\n<AxesSubplot: >\n\n\n\n\n\n\nsb_food.plot(y = ' Fat (g)', kind = 'box')\n\n<AxesSubplot: >\n\n\n\n\n\n\nsb_food.plot(y = ' Carb. (g)', kind = 'box')\n\n<AxesSubplot: >\n\n\n\n\n\n\nsb_food.plot(y = ' Fiber (g)', kind = 'box')\n\n<AxesSubplot: >\n\n\n\n\n\n\nsb_food.plot(y = ' Protein (g)', kind = 'box')\n\n<AxesSubplot: >\n\n\n\n\n\n\n\nDrinks Data\n\nsb_drinks.info()\n\n<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 242 entries, 0 to 241\nData columns (total 18 columns):\n #   Column                     Non-Null Count  Dtype  \n---  ------                     --------------  -----  \n 0   Beverage_category          242 non-null    object \n 1   Beverage                   242 non-null    object \n 2   Beverage_prep              242 non-null    object \n 3   Calories                   242 non-null    int64  \n 4    Total Fat (g)             242 non-null    object \n 5   Trans Fat (g)              242 non-null    float64\n 6   Saturated Fat (g)          242 non-null    float64\n 7    Sodium (mg)               242 non-null    int64  \n 8    Total Carbohydrates (g)   242 non-null    int64  \n 9   Cholesterol (mg)           242 non-null    int64  \n 10   Dietary Fibre (g)         242 non-null    int64  \n 11   Sugars (g)                242 non-null    int64  \n 12   Protein (g)               242 non-null    float64\n 13  Vitamin A (% DV)           242 non-null    object \n 14  Vitamin C (% DV)           242 non-null    object \n 15   Calcium (% DV)            242 non-null    object \n 16  Iron (% DV)                242 non-null    object \n 17  Caffeine (mg)              241 non-null    object \ndtypes: float64(3), int64(6), object(9)\nmemory usage: 34.2+ KB\n\n\n\n\n\n\nAnalysis\n\nConnotation/Perception of Each Food Name and Correlation to Nutrition\n\nimport nltk\nfrom nltk.sentiment import vader\nnltk.download('vader_lexicon')\nnltk.download('stopwords')\nsia = vader.SentimentIntensityAnalyzer()\n\nnltk.download('opinion_lexicon')\nfrom nltk.corpus import opinion_lexicon\n\nfrom nltk.tokenize import sent_tokenize, word_tokenize\n\n[nltk_data] Downloading package vader_lexicon to\n[nltk_data]     /home/jovyan/nltk_data...\n[nltk_data]   Package vader_lexicon is already up-to-date!\n[nltk_data] Downloading package stopwords to /home/jovyan/nltk_data...\n[nltk_data]   Package stopwords is already up-to-date!\n[nltk_data] Downloading package opinion_lexicon to\n[nltk_data]     /home/jovyan/nltk_data...\n[nltk_data]   Package opinion_lexicon is already up-to-date!\n\n\n\ndef getSentiment(item):\n    return sia.polarity_scores(item)['compound']\n\n\npositive_words = set(opinion_lexicon.positive())\nnegative_words = set(opinion_lexicon.negative())\n\ndef getOpinionScore(item):\n    words = nltk.word_tokenize(item.lower())\n\n    num_positive = sum(1 for word in words if word in positive_words)\n    num_negative = sum(1 for word in words if word in negative_words)\n\n    opinion_score = num_positive - num_negative\n\n    return opinion_score\n\n\nStarbucks Food Items\n\nsb_food['Sentiment'] = sb_food['Item'].apply(getSentiment)\nsb_food['Sentiment'].describe()\n\ncount    113.000000\nmean       0.019035\nstd        0.087896\nmin        0.000000\n25%        0.000000\n50%        0.000000\n75%        0.000000\nmax        0.510600\nName: Sentiment, dtype: float64\n\n\n\nsb_food['Opinion'] = sb_food['Item'].apply(getOpinionScore)\nsb_food['Opinion'].describe()\n\ncount    113.000000\nmean       0.035398\nstd        0.351761\nmin       -1.000000\n25%        0.000000\n50%        0.000000\n75%        0.000000\nmax        1.000000\nName: Opinion, dtype: float64\n\n\n\nsb_food.loc[sb_food['Opinion']>0, [' Calories', ' Fat (g)', ' Carb. (g)']].hist()\n\narray([[<AxesSubplot: title={'center': ' Calories'}>,\n        <AxesSubplot: title={'center': ' Fat (g)'}>],\n       [<AxesSubplot: title={'center': ' Carb. (g)'}>, <AxesSubplot: >]],\n      dtype=object)\n\n\n\n\n\n\n\nStarbucks Drinks Items\n\nsb_drinks['Sentiment'] = sb_drinks['Beverage'].apply(getSentiment)\nsb_drinks['Sentiment'].describe()\n\ncount    242.000000\nmean      -0.001914\nstd        0.012029\nmin       -0.077200\n25%        0.000000\n50%        0.000000\n75%        0.000000\nmax        0.000000\nName: Sentiment, dtype: float64\n\n\n\nsb_drinks['Opinion'] = sb_drinks['Beverage'].apply(getOpinionScore)\nsb_drinks['Opinion'].describe()\n\ncount    242.000000\nmean       0.107438\nstd        0.359844\nmin       -1.000000\n25%        0.000000\n50%        0.000000\n75%        0.000000\nmax        1.000000\nName: Opinion, dtype: float64\n\n\n\nsb_drinks.loc[sb_drinks['Opinion']>0, ['Calories']].hist(bins = 10)\n\narray([[<AxesSubplot: title={'center': 'Calories'}>]], dtype=object)\n\n\n\n\n\n\nsb_drinks.loc[sb_drinks['Opinion']<0, ['Calories']].hist()\n\narray([[<AxesSubplot: title={'center': 'Calories'}>]], dtype=object)\n\n\n\n\n\n\n\nLimitations of Results\n\nDiscuss why SIA and Opinion Lexicon didn’t work\n\nWords were neutral, and not enough context to create a sentiment\n\nDiscuss limited analysis of available data\n\nNot enough data points to draw conclusion\nUnequal amounts of “positive” versus “negative food items\n\nDiscuss future studies\n\nMake a set of positive/negative list specifically from the food health perspective\n\n\n\n\n\nFrequency of Sounds (Letters) in Product Names and Correlation to Nutrition\n\ndef letterFrequency(item):\n    frequencyScore = 0\n    for letter in ['f', 's', 'i', 'e']:\n        if letter in item.lower():\n            frequencyScore = frequencyScore + 1\n    for letter in ['b', 'd', 'g', 'o', 'u']:\n        if letter in item.lower():\n            frequencyScore = frequencyScore - 1\n    if frequencyScore > 0 :\n      phonemicSounds = 'high'\n    elif frequencyScore < 0:\n      phonemicSounds = 'low'\n    else:\n      phonemicSounds = 'neutral'\n    return phonemicSounds\n\n\nStarbucks Food\n\nsb_food['phonemicFrequency'] = sb_food['Item'].apply(letterFrequency)\n\n0          low\n1          low\n2      neutral\n3         high\n4          low\n        ...   \n108    neutral\n109        low\n110    neutral\n111    neutral\n112    neutral\nName: phonemicFrequency, Length: 113, dtype: object\n\n\n\nsb_food.loc[sb_food['phonemicFrequency']=='high', [' Calories', ' Fat (g)', ' Carb. (g)']].hist()\n\narray([[<AxesSubplot: title={'center': ' Calories'}>,\n        <AxesSubplot: title={'center': ' Fat (g)'}>],\n       [<AxesSubplot: title={'center': ' Carb. (g)'}>, <AxesSubplot: >]],\n      dtype=object)\n\n\n\n\n\n\nsb_food.loc[sb_food['phonemicFrequency']=='low', [' Calories', ' Fat (g)', ' Carb. (g)']].hist()\n\narray([[<AxesSubplot: title={'center': ' Calories'}>,\n        <AxesSubplot: title={'center': ' Fat (g)'}>],\n       [<AxesSubplot: title={'center': ' Carb. (g)'}>, <AxesSubplot: >]],\n      dtype=object)\n\n\n\n\n\n\nsb_food.loc[sb_food['phonemicFrequency']=='neutral', [' Calories', ' Fat (g)', ' Carb. (g)']].hist()\n\narray([[<AxesSubplot: title={'center': ' Calories'}>,\n        <AxesSubplot: title={'center': ' Fat (g)'}>],\n       [<AxesSubplot: title={'center': ' Carb. (g)'}>, <AxesSubplot: >]],\n      dtype=object)\n\n\n\n\n\n\nsb_drinks['phonemicFrequency'] = sb_drinks['Beverage'].apply(letterFrequency)\n\n\nsb_drinks.loc[sb_drinks['phonemicFrequency']=='high', ['Calories']].hist()\n\narray([[<AxesSubplot: title={'center': 'Calories'}>]], dtype=object)\n\n\n\n\n\n\nsb_drinks.loc[sb_drinks['phonemicFrequency']=='low', ['Calories']].hist()\n\narray([[<AxesSubplot: title={'center': 'Calories'}>]], dtype=object)\n\n\n\n\n\n\n\nGoals for this section\n\nplot histograms for high, neutral, and low phonemic Frequency on the same graph\nplot for additional categories beyond calories\nexplor different plot types\n\nMAYBE conduct a network analysis to predict what the next item name will be?\n\nI am still exploring the data and and looking for more trends and considering altering my research question to compare Starbucks and McDonalds Nutrition since most of my results look inconclusive\n\n\n\n\nMcDonalds Data (if enough time)\n\nmcd_menu = pd.read_csv('https://raw.githubusercontent.com/amywzhou/DH140/main/mcdonalds%20data/menu.csv')\nmcd_menu.info()\n\n<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 260 entries, 0 to 259\nData columns (total 24 columns):\n #   Column                         Non-Null Count  Dtype  \n---  ------                         --------------  -----  \n 0   Category                       260 non-null    object \n 1   Item                           260 non-null    object \n 2   Serving Size                   260 non-null    object \n 3   Calories                       260 non-null    int64  \n 4   Calories from Fat              260 non-null    int64  \n 5   Total Fat                      260 non-null    float64\n 6   Total Fat (% Daily Value)      260 non-null    int64  \n 7   Saturated Fat                  260 non-null    float64\n 8   Saturated Fat (% Daily Value)  260 non-null    int64  \n 9   Trans Fat                      260 non-null    float64\n 10  Cholesterol                    260 non-null    int64  \n 11  Cholesterol (% Daily Value)    260 non-null    int64  \n 12  Sodium                         260 non-null    int64  \n 13  Sodium (% Daily Value)         260 non-null    int64  \n 14  Carbohydrates                  260 non-null    int64  \n 15  Carbohydrates (% Daily Value)  260 non-null    int64  \n 16  Dietary Fiber                  260 non-null    int64  \n 17  Dietary Fiber (% Daily Value)  260 non-null    int64  \n 18  Sugars                         260 non-null    int64  \n 19  Protein                        260 non-null    int64  \n 20  Vitamin A (% Daily Value)      260 non-null    int64  \n 21  Vitamin C (% Daily Value)      260 non-null    int64  \n 22  Calcium (% Daily Value)        260 non-null    int64  \n 23  Iron (% Daily Value)           260 non-null    int64  \ndtypes: float64(3), int64(18), object(3)\nmemory usage: 48.9+ KB\n\n\n\nunique_categories = mcd_menu['Category'].unique()\nprint(unique_categories)\n\n['Breakfast' 'Beef & Pork' 'Chicken & Fish' 'Salads' 'Snacks & Sides'\n 'Desserts' 'Beverages' 'Coffee & Tea' 'Smoothies & Shakes']\n\n\n\nmcd_drinks = pd.concat([mcd_menu[mcd_menu['Category']== 'Beverages'], mcd_menu[mcd_menu['Category']== 'Coffee & Tea'], mcd_menu[mcd_menu['Category']== 'Smoothies & Shakes']])\nmcd_food = pd.concat([mcd_menu[mcd_menu['Category']== 'Breakfast'], mcd_menu[mcd_menu['Category']== 'Beef & Pork'], mcd_menu[mcd_menu['Category']== 'Chicken & Fish'],mcd_menu[mcd_menu['Category']== 'Salads'],mcd_menu[mcd_menu['Category']== 'Snacks & Sides']])\n\n\nmcd_food['Sentiment'] = mcd_food['Item'].apply(getSentiment)\nmcd_food['Sentiment'].describe()\n\ncount    103.000000\nmean       0.014728\nstd        0.086202\nmin        0.000000\n25%        0.000000\n50%        0.000000\n75%        0.000000\nmax        0.599400\nName: Sentiment, dtype: float64\n\n\n\nmcd_food.loc[mcd_food['Sentiment']>0, ['Calories', 'Total Fat', 'Cholesterol']].hist()\n\narray([[<AxesSubplot: title={'center': 'Calories'}>,\n        <AxesSubplot: title={'center': 'Total Fat'}>],\n       [<AxesSubplot: title={'center': 'Cholesterol'}>, <AxesSubplot: >]],\n      dtype=object)"
  },
  {
    "objectID": "posts/welcome/index.html",
    "href": "posts/welcome/index.html",
    "title": "Welcome To My Blog",
    "section": "",
    "text": "This is the first post in a Quarto blog. Welcome!\n\nSince this post doesn’t specify an explicit image, the first image in the post will be used in the listing page of posts."
  },
  {
    "objectID": "posts/Test.html",
    "href": "posts/Test.html",
    "title": "First File",
    "section": "",
    "text": "1+1\n\n2"
  },
  {
    "objectID": "posts/post-with-code/index.html",
    "href": "posts/post-with-code/index.html",
    "title": "Post With Code",
    "section": "",
    "text": "This is a post with executable code."
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this blog"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "amysblog",
    "section": "",
    "text": "Introduction\n\n\n\n\n\n\n\n\n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\nHappiness and COVID-19\n\n\n\n\n\nDH140 Final Project\n\n\n\n\n\n\nMar 24, 2023\n\n\nAmy Zhou\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFirst File\n\n\n\n\n\nTesting Quarto\n\n\n\n\n\n\nMar 10, 2023\n\n\nAmy Zhou\n\n\n\n\n\n\n  \n\n\n\n\nPost With Code\n\n\n\n\n\n\n\nnews\n\n\ncode\n\n\nanalysis\n\n\n\n\n\n\n\n\n\n\n\nMar 10, 2023\n\n\nHarlow Malloc\n\n\n\n\n\n\n  \n\n\n\n\nWelcome To My Blog\n\n\n\n\n\n\n\nnews\n\n\n\n\n\n\n\n\n\n\n\nMar 7, 2023\n\n\nTristan O’Malley\n\n\n\n\n\n\nNo matching items"
  }
]